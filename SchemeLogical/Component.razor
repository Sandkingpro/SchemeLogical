@inject StateContainer StateContainer
@inject IJSRuntime JS
@using System.Text.Json;
<div class="ccfa_query">
<div class="borders" style="width:auto;" ondragover="event.preventDefault()" tabindex="1" draggable="true"  @ondrop="@(()=> Drop(operand_index,op,prev_operands))" 
                             @ondragstart="@(()=> StartDrag(op,prev_operands,operand_index))"
                            @ondrop:stopPropagation="true"
                             @ondragstart:stopPropagation="true"
                             @ondragenter="(()=>IsAllowedZone())"
                            @ondragend="(()=>DeleleteItem())"
                             @ondragend:stopPropagation="true">

    @if (@op.Equals("and") | @op.Equals("or") | @op.Equals("not"))
    {
        <svg height="100%" width="16" viewBox="0 0 16 219" fill="none" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="none">
            @if (@op.Equals("or"))
            {
                <path d="M16 1H1V218H16" stroke="#43633D" stroke-width="2px" vector-effect="non-scaling-stroke" />
            }
            @if (@op.Equals("and"))
            {
                <path d="M16 1H1V218H16" stroke="#2649C5" stroke-width="2px" vector-effect="non-scaling-stroke" />
            }
             @if (@op.Equals("not"))
            {
                <path d="M16 1H1V218H16" stroke="#683A9D" stroke-width="2px" vector-effect="non-scaling-stroke" />
            }
        </svg>
        @if (@op.Equals("or"))
        {
            <div class="border_move"  style="background: #DDE7DB; border: 1px solid #F5F7FB;width:60px;">
                <img src="/css/img/move_icon.svg" style="height: 51px; width: 12px;">
                <p style="margin-left: 0; margin-top: 15px;">@op.ToUpper()</p>
                <div style="display:flex;flex-direction:column;gap:3px;">
                        <img src="/css/img/arrow_up.svg" @onclick="@(()=> nextOperand(op))" @onclick:stopPropagation="true"/>
                        <img src="/css/img/arrow_down.svg" />
                </div>
            </div>
        }
        @if (@op.Equals("not"))
        {
            <div class="border_move"  style="background: #DDD1EB;border: 1px solid #FFFFFF;width:70px">
                <img src="/css/img/move_icon.svg" style="height: 51px; width: 12px;">
                <p style="margin-left: 0; margin-top: 15px;">@op.ToUpper()</p>
                <div style="display:flex;flex-direction:column;gap:3px;">
                        <img src="/css/img/arrow_up.svg"  @onclick="@(()=> nextOperand(op))" @onclick:stopPropagation="true" />
                        <img src="/css/img/arrow_down.svg" />
                </div>
            </div>
        }
        @if(@op.Equals("and"))
        {
            <div class="border_move" style="width:70px;">
                <img src="/css/img/move_icon.svg" style="height: 51px; width: 12px;">
                <p style="margin-left: 0; margin-top: 15px;">@op.ToUpper()</p>
                <div style="display:flex;flex-direction:column;gap:3px">
                        <img src="/css/img/arrow_up.svg"  @onclick="@(()=> nextOperand(op))"/>
                        <img src="/css/img/arrow_down.svg"/>
                </div>
            </div>
        }
        @if (operands != null)
        {

            @for (var i = 0; i < operands.Count; i++)
            {
                int j = i;
                    @if (operands[i].op.Equals("and") | operands[i].op.Equals("or"))
                    {
                        <CascadingValue Value="this">
                            <Component op="@operands[j].op" operands="@operands[j].operands" operand_index="@j" prev_operands="@operands" prev_op="@op" level="@level" OnDragCallback="@(()=>reDraw())"></Component>
                        </CascadingValue>
                    
                }
                    @if (!operands[i].op.Equals("and") & !operands[i].op.Equals("or"))
                    {
                        <div class="move_element" draggable="true" tabindex="1"  ondragover="event.preventDefault()"
                             @ondrop="@(()=> Drop(j,op,operands))"
                             @ondragstart="@(()=> StartDrag(op,operands,j))"
                             @ondrop:stopPropagation="true"
                             @ondragstart:stopPropagation="true"
                             @ondragend="(()=>DeleleteItem())"
                             @ondragend:stopPropagation="true">
                            <img src="/css/img/move_icon.svg" style="height: 51px; width: 12px;" />
                            @if (operands[i].operands[0].field_string != null)
                            {
                                <button class="elem">
                                    @operands[i].operands[0].field_string @operands[i].op
                                    @operands[i].operands[1].value_string
                                </button>
                            }
                            @if (operands[i].operands[0].field_float != null)
                            {
                                <button class="elem">
                                    @operands[i].operands[0].field_float @operands[i].op
                                    @operands[i].operands[1].value_float
                                </button>
                            }
                            @if (operands[i].operands[0].field_varchar != null)
                            {
                                <button class="elem">
                                    @operands[i].operands[0].field_varchar @operands[i].op
                                    @operands[i].operands[1].value_varchar
                                </button>
                            }

                        </div>
                    @if (j != operands.Count - 1)
                    {
                        <div style="height:30px" @ondrop="@(()=> Drop(j,op,operands))" @ondrop:stopPropagation="true"
                             @ondragstart:stopPropagation="true"
                             @ondragend="(()=>DeleleteItem())"
                             @ondragend:stopPropagation="true"></div>
                    }
                    
                        
                    }
                
            }
            
            
        }

    }

</div>
@if (operand_index != prev_operands.Count - 1)
{
    <div style="height:60px" @ondrop="@(()=> Drop(operand_index,prev_op,prev_operands))"  @ondrop:stopPropagation="true"
                             @ondragstart:stopPropagation="true"
                            @ondragenter:stopPropagation="true"
                            @ondragend="(()=>DeleleteItem())"
                             @ondragend:stopPropagation="true"></div>
}

</div>

@code {
    [Parameter]
    public string op { get; set; }
    [Parameter] 
    public List<Item>? operands { get; set; }
    [Parameter] public int level{ get; set; }
    [CascadingParameter] public Component? component { get; set; }
    [CascadingParameter] public Pages.Index parent { get; set; }
    [Parameter]
    public int operand_index { get; set; }
    [Parameter]
    public List<Item>? prev_operands { get; set; }
    [Parameter]
    public String? prev_op { get; set; }
    [Parameter]
    public EventCallback OnDragCallback { get; set; }
    private Action? OnChange { get; set;}
    private void NotifyStateChanged() => OnChange?.Invoke();
    Item? item;
    Item? current;
    int count;
    bool visibility = true;
    int currentIndex;
    int currentIndexOperand;
    bool flag=false;
    bool flag_component = false;
    bool allowed_zone = false;
    protected override void OnInitialized()
    {
        item = new Item(op, operands);
        base.OnInitialized();
        StateContainer.OnChange += StateHasChanged;
    }
    protected override void OnParametersSet()
    {
        op = item.op;
    }
    private void StartDrag(String _op, List<Item> _operands,int i)
    {
        Console.WriteLine(i);
        item = new Item(_op, _operands);
        allowed_zone = StateContainer.AllowZone;
        currentIndex = i;
        StateContainer.Property = currentIndex.ToString();
        current = _operands[currentIndex];
        StateContainer.Current = current;
        StateContainer.PropertyOperand = current.op;
        Console.WriteLine(_operands[currentIndex].op);
        Console.WriteLine($"Vsego:{_operands.Count}");
        for (int j = 0; j < _operands.Count; j++)
        {
            Console.WriteLine(_operands[j].op);
        }
        StateContainer.Flag = true;
        Console.WriteLine($"level:{level}");
        flag_component = true;


    }


    int GetIndex(Item item)
    {
        return item.operands.FindIndex(a => a.op==item.op);
    }

    void Drop(int j, String _op, List<Item> _operands)
    {
        if (item != null)
        {
            var index = j;
            currentIndex = int.Parse(StateContainer.Property);
            Console.WriteLine($"Drop index is {index}, move from {currentIndex}");
            // get current item
            Console.WriteLine(index);
            current = StateContainer.Current;
            var drop_item = _operands[index];
            Console.WriteLine(current.level);
            Console.WriteLine(drop_item.level);
            if (current.level == drop_item.level)
            {
                _operands.RemoveAt(currentIndex);
                _operands.Insert(index, current);
                StateContainer.Flag = false;
                Console.WriteLine("i am here");
                parent.getJson();
            }
            else
            {
                current.level = drop_item.level;
                _operands.Add(current);
                StateContainer.Flag = true;
                reDraw();
                return;
            }



            // update current selection
            reDraw();
            Console.WriteLine($"Count:{count}");
            StateContainer.Flag = false;


        }
        else
        {
            Console.WriteLine("Drop - null");
        }
    }
    public void reDraw()
    {
        StateHasChanged();
    }
    void DeleleteItem()
    {
        flag = StateContainer.Flag;
        Console.WriteLine(flag);
        if (flag && allowed_zone)
        {
            if(current.op.Equals("or") | current.op.Equals("and") | current.op.Equals("not"))
            {
                prev_operands.RemoveAt(currentIndex);
                if (prev_operands.Count == 1)
                {
                    if (component.component != null)
                    {
                        component.prev_operands.Add(operands[0]);
                        component.prev_operands.RemoveAt(0);
                        component.component.reDraw();
                    }

                }
                component.reDraw();

            }
            else
            {
                operands.RemoveAt(currentIndex);
                if (operands.Count == 1 && prev_operands!=operands)
                {
                    prev_operands.Add(operands[0]);
                    prev_operands.RemoveAt(findOperandCount());
                    component.reDraw();
                }
                if(prev_operands==operands && operands.Count==1)
                {
                    item = item.operands[0];
                    prev_operands = item.operands;
                    operands = item.operands;
                    op = item.op;
                    reDraw();
                    parent.getJson(item);
                    return;

                }
                flag_component = false;
            }


        }
        StateContainer.AllowZone = false;
        parent.getJson();

    }
    int findOperandCount()
    {
        foreach(var a in prev_operands)
        {
            if (a.operands != null)
            {
                if (a.operands.Count <= 1)
                {
                    return prev_operands.IndexOf(a);
                }
            }
        }
        return -1;
    }
    private void nextOperand(string _op)
    {
        Console.WriteLine("нажато");
        if (op.Equals("or"))
        {
            op = "and";
            count++;
            Console.WriteLine(count);
            Console.WriteLine(op);
            //OnParametersSet();
            return;

        }
        if (op.Equals("and"))
        {
            op = "not";
            Console.WriteLine(count);
            Console.WriteLine(op);
            //OnParametersSet();
            StateHasChanged();
            return;
        }
        if (op.Equals("not"))
        {
            op = "or";
            Console.WriteLine(count);
            Console.WriteLine(op);
            //OnParametersSet();
            StateHasChanged();
            return;
        }
    }
    private void IsAllowedZone()
    {
        allowed_zone = true;
        StateContainer.AllowZone = allowed_zone;
    }
}

