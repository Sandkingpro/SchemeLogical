@using System.Linq.Expressions
@using System.Text
@using System.Globalization
@using System.IO;
@using System.Collections;
@using System.Text.Json;
@using System.Text.Json.Nodes
@inject StateContainer StateContainer
@page "/"
<div class="scheme container-fluid m-2">
    <AddField_component></AddField_component>
</div>

@code{

    static string value = "{ 'op': 'not','operands': [{ 'op': 'and', 'operands': [{'op': '=', 'operands': [{ 'field-string': 'path' },{ 'value-string': '/json' }]},{'op': '=', 'operands': [{ 'field-string': 'paths' },{ 'value-string': '/json' }]},{ 'op': '>=','operands': [{ 'field-float': 'latitude'}, { 'value-float': 57.89331022258886}]},{'op':'or','operands':[{'op': '=', 'operands': [{ 'field-string': 'path' },{ 'value-string': '/json' }]},{ 'op': '>=','operands': [{ 'field-float': 'latitude'}, { 'value-float': 57.89331022258886}]}]}]},{'op': '=', 'operands': [{'field-varchar': 'stream'},{'value-varchar': 'checkRegistration'}]}]}";
    static string json = value?.Replace(" ", "");
    static string json2 = json?.Replace("'", "\"");
    public static string json3 = json2?.Replace("-", "_");
    static Item item = JsonSerializer.Deserialize<Item>(json3);
    int level = 1;
    Element element = new Element();
    public void getJson()
    {
        value = JsonSerializer.Serialize(item);
        Console.WriteLine(value);
    }
    public void getJson(Item _item)
    {
        value = JsonSerializer.Serialize(_item);
        Console.WriteLine(value);
    }
    private void ReDraw()
    {
        StateHasChanged();
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        setDeep(level,item);
        JsonNode jsonNode = JsonNode.Parse(json3);
        JsonNode root = jsonNode.Root;
        JsonObject keyValuePairs = root.AsObject();
        String js="";
        foreach(var value in keyValuePairs)
        {
            if (!value.Key.Equals("operands"))
            {
                Console.WriteLine(value.Value+";level:0");
            }

            var k = value.Value;
            if (value.Key.Equals("op"))
            {
                element.operandValue = value.Value.ToString();
                element.operands = new List<Element>();
            }
            js = k.ToJsonString();

        }
        //parseJson(js,jsonNode,root,element,1);
        //var new_js = JsonSerializer.Serialize(element);
        //Console.WriteLine(new_js);

    }
    void setDeep(int level,Item mitem)
    {
        mitem.level = level;
        if(mitem.op.Equals("or") | mitem.op.Equals("and") | mitem.op.Equals("not"))
        {
            level += 1;
        }
        foreach(Item _item in mitem.operands)
        {
            _item.level = level;
            if (_item.operands != null)
            {
                setDeep(level,_item);
            }
        }

    }
    void parseJson(string js,JsonNode jsonNode,JsonNode root,Element element,int count)
    {
        jsonNode=JsonNode.Parse(js);
        root = jsonNode.Root;
        JsonArray o = root.AsArray();
        Element _element = new Element();
        _element.level = count;
        foreach (var t in o)
        {

            foreach (var m in t.AsObject())
            {
                if (!m.Key.Equals("operands"))
                {
                    Console.WriteLine(m.Value.ToString()+";level:"+_element.level);
                }

                if (m.Key.Equals("op"))
                {
                    _element.operandValue = m.Value.ToString();
                    if(m.Value.ToString().Equals("or") | m.Value.ToString().Equals("and") | m.Value.ToString().Equals("not"))
                    {
                        count++;
                    }
                }
                if(m.Key.Contains("string") | m.Key.Contains("char") | m.Key.Contains("float"))
                {
                    _element.type = m.Value.ToString();
                    _element.key = m.Key;
                }
                if (m.Key.Contains("value"))
                {
                    _element.value = m.Value.ToString();
                }

                if (m.Key.Equals("operands"))
                {

                    parseJson(m.Value.ToJsonString(), jsonNode, root, _element,count);

                }

            }


        }

        
    }
           

    



}
