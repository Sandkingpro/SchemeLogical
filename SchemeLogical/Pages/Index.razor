@using System.Linq.Expressions
@using System.Text
@using System.Globalization
@using System.IO;
@using System.Collections;
@using System.Text.Json;
@page "/"
<div class="scheme container-fluid m-5">
    <Component op="@item.op" operands="@item.operands" level="@item.level"></Component>


</div>

@code{

    static string value = "{ 'op': 'and','operands': [{ 'op': 'and', 'operands': [{'op': '=', 'operands': [{ 'field-string': 'path' },{ 'value-string': '/json' }]},{'op': '=', 'operands': [{ 'field-string': 'paths' },{ 'value-string': '/json' }]},{ 'op': '>=','operands': [{ 'field-float': 'latitude'}, { 'value-float': 57.89331022258886}]},{'op':'or','operands':[{'op': '=', 'operands': [{ 'field-string': 'path' },{ 'value-string': '/json' }]},{ 'op': '>=','operands': [{ 'field-float': 'latitude'}, { 'value-float': 57.89331022258886}]}]}]},{'op': '=', 'operands': [{'field-varchar': 'stream'},{'value-varchar': 'checkRegistration'}]}]}";
    static string json = value?.Replace(" ", "");
    static string json2 = json?.Replace("'", "\"");
    public static string json3 = json2?.Replace("-", "_");
    static Item item = JsonSerializer.Deserialize<Item>(json3);
    int level = 1;
    private void ReDraw()
    {
        StateHasChanged();
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        setDeep(level,item);
    }
    void setDeep(int level,Item item)
    {

        foreach(Item _item in item.operands)
        {
            _item.level = level;
            if (_item.operands != null)
            {
                if(_item.op.Equals("or") | _item.op.Equals("and"))
                {
                    level += 1;
                }
                setDeep(level,_item);
            }
        }
       
    }



}
