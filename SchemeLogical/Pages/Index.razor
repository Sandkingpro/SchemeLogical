@using System.Linq.Expressions
@using System.Text
@using System.Globalization
@using System.IO;
@using System.Collections;
@using System.Text.Json;
@using System.Text.Json.Nodes
@inject StateContainer StateContainer
@page "/"
<div class="scheme container-fluid m-2">
    
</div>

@code{

    static string value = "{ 'op': 'not','operands': [{ 'op': 'and', 'operands': [{'op': '=', 'operands': [{ 'field-string': 'path' },{ 'value-string': '/json' }]},{'op': '=', 'operands': [{ 'field-string': 'paths' },{ 'value-string': '/json' }]},{ 'op': '>=','operands': [{ 'field-float': 'latitude'}, { 'value-float': 57.89331022258886}]},{'op':'or','operands':[{'op': '=', 'operands': [{ 'field-string': 'path' },{ 'value-string': '/json' }]},{ 'op': '>=','operands': [{ 'field-float': 'latitude'}, { 'value-float': 57.89331022258886}]}]}]},{'op': '=', 'operands': [{'field-varchar': 'stream'},{'value-varchar': 'checkRegistration'}]}]}";
    static string json = value?.Replace(" ", "");
    static string json2 = json?.Replace("'", "\"");
    public static string json3 = json2?.Replace("-", "_");
    static Item item = JsonSerializer.Deserialize<Item>(json3);
    int level = 1;
    Element element = new Element();
    public void getJson()
    {
        value = JsonSerializer.Serialize(item);
        Console.WriteLine(value);
    }
    public void getJson(Item _item)
    {
        value = JsonSerializer.Serialize(_item);
        Console.WriteLine(value);
    }
    private void ReDraw()
    {
        StateHasChanged();
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Element element=QueryJsonParser.Deserialize(value);
        var new_js = JsonSerializer.Serialize(element);
        Console.WriteLine(QueryJsonParser.Serialize(element));


    }


}
